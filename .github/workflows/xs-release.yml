# Build extra small Deno release

name: xs-release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: oprypin/find-latest-tag@v1
        with:
          repository: denoland/deno
          releases-only: true
        id: deno
      - run: echo "Deno is at version ${{ steps.deno.outputs.tag }}"
      - uses: actions/checkout@v2
        with:
          repository: denoland/deno
          ref: ${{ steps.deno.outputs.tag }}
      - run: echo -e "cargo-features = [\"strip\"]\n$(cat Cargo.toml)" > Cargo.toml
      - uses: ciiiii/toml-editor@1.0.0
        with:
          file: "Cargo.toml"
          key: "profile.release.lto"
          value: true
      - uses: ciiiii/toml-editor@1.0.0
        with:
          file: "Cargo.toml"
          key: "profile.release.opt-level"
          value: "z"
      - uses: ciiiii/toml-editor@1.0.0
        with:
          file: "Cargo.toml"
          key: "profile.release.strip"
          value: "symbols"
      - uses: ciiiii/toml-editor@1.0.0
        with:
          file: "Cargo.toml"
          key: "profile.release.debug"
          value: false
      - uses: ciiiii/toml-editor@1.0.0
        with:
          file: "Cargo.toml"
          key: "profile.release.panic"
          value: "abort"
      - run: cat Cargo.toml
      - name: Install latest Rust nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked
      - name: Zip release
        working-directory: target/release
        run: zip -r deno-x86_64-unknown-linux-gnu.zip deno
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: |
            target/release/deno-x86_64-unknown-linux-gnu.zip
      - name: Release ${{ steps.deno.outputs.tag }}
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ steps.deno.outputs.tag }}"
          name: "${{ steps.deno.outputs.tag }}"
          prerelease: ${{ steps.deno.outputs.tag == 'latest' }}
          allowUpdates: true
          replacesArtifacts: true
          artifacts: "release/*"
          token: ${{ secrets.GITHUB_TOKEN }}
